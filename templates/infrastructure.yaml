AWSTemplateFormatVersion: '2010-09-09'

Description: Prophase infrastructure stack

Parameters:
  Env:
    Description: Environment prefix
    Type: String
  BotServiceName:
    Description: Name of bot impl service
    Type: String

Resources:
#####################################
#               API                 #
#####################################
  RestApi:
    Type: 'AWS::ApiGateway::RestApi'
    Properties:
      EndpointConfiguration:
        Types:
          - EDGE
      Name: !Sub ${Env}-api

#  RestApiDeployment:
#    Type: AWS::ApiGateway::Deployment
#    DependsOn:
#      - PostBotMethod
#    Properties:
#      RestApiId: !Ref RestApi

#  RestApiStage:
#    Type: AWS::ApiGateway::Stage
#    Properties:
#      StageName: !Sub ${Env}
#      Description: !Sub ${Env} Stage
#      RestApiId: !Ref RestApi
#      DeploymentId: !Ref RestApiDeployment

  RestApiRootResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt RestApi.RootResourceId
      PathPart: api
      RestApiId: !Ref RestApi

# Api Methods Level 1
  PostBotMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      HttpMethod: POST
#      Integration:
#        ConnectionType: INTERNET
#        IntegrationHttpMethod: POST
#        Type: AWS_PROXY
      ResourceId: !Ref RestApiRootResource
      RestApiId: !Ref RestApi


#####################################
#             CLUSTER               #
#####################################
  ECSTaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ecs-tasks.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Description: Role to execute ACS Task

  ECSCluster:
    Type: 'AWS::ECS::Cluster'
    Properties:
      ClusterName: !Sub ${Env}

  AppLoadBalancer:
    Type: 'AWS::ElasticLoadBalancingV2::LoadBalancer'
    Properties:
      Name: !Sub ${Env}-ApplicationLoadBalancer
      Subnets:
        - subnet-08e523a5d8cfc4bad
        - subnet-04a6f0c79e66d298b
        - subnet-06c9b90d113095ae2
      SecurityGroups:
        - !GetAtt FargateALBSG.GroupId
      Type: application

  FargateTargetGroup:
    Type: 'AWS::ElasticLoadBalancingV2::TargetGroup'
    Properties:
      Name: !Sub ${Env}-ClusterTargetGroup
      VpcId: vpc-0a6772e112fb9c3f4
      Protocol: HTTP
      Port: 8080
      HealthCheckPath: /actuator/
      TargetType: ip

  FargateListener:
    Type: 'AWS::ElasticLoadBalancingV2::Listener'
    Properties:
      DefaultActions:
        - TargetGroupArn: !Ref FargateTargetGroup
          Type: forward
      LoadBalancerArn: !Ref AppLoadBalancer
      Port: 80
      Protocol: HTTP

  FargateALBSG:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: SG for the Fargate ALB
      GroupName: !Sub ${Env}-FargateALB_SG
      SecurityGroupIngress:
        - CidrIpv6: ::/0
          FromPort: 80
          ToPort: 80
          IpProtocol: TCP
          Description: 'Inbound rule for IPv6 traffic'
        - CidrIp: 0.0.0.0/0
          FromPort: 80
          ToPort: 80
          IpProtocol: TCP
          Description: 'Inbound rule for IPv4 traffic'

  ALB2FargateContainersSG:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: SG for traffic between ALB and containers
      GroupName: !Sub ${Env}-ALB2FargateContainers_SG
      SecurityGroupIngress:
        - IpProtocol: -1
          SourceSecurityGroupId: !GetAtt FargateALBSG.GroupId
          Description: 'Inbound rule for all traffic'

#####################################
#            SERVICES               #
#####################################

# prophase-bot service
  BotServiceRepository:
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: !Sub ${BotServiceName}
      RepositoryPolicyText:
        Version: "2012-10-17"
        Statement:
          - Sid: AllowPushPull
            Effect: Allow
            Principal:
              AWS:
                - "arn:aws:iam::149284612295:user/GitHub_Actions"
            Action:
              - "ecr:*"

  BotServiceDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      RequiresCompatibilities:
        - "FARGATE"
      ExecutionRoleArn: !GetAtt ECSTaskExecutionRole.Arn
      Cpu: 256
      Memory: 512
      NetworkMode: "awsvpc"
      ContainerDefinitions:
        - Name: !Sub ${BotServiceName}-task
          Image: !Sub ${BotServiceRepository.RepositoryUri}:latest
          MemoryReservation: 256
          Memory: 512
          PortMappings:
            - ContainerPort: 8081
              Protocol: tcp

Outputs: {}