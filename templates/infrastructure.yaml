AWSTemplateFormatVersion: '2010-09-09'

Description: Prophase infrastructure stack

Parameters:
  Env:
    Description: Environment prefix
    Type: String
  BotServiceName:
    Description: Name of bot impl service
    Type: String

Resources:
  VPC:
    Type: 'AWS::EC2::VPC'
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsHostnames: true
      EnableDnsSupport: true
      Tags:
        - Key: Name
          Value: !Sub ${Env}-vpc
  Subnet01:
    Type: 'AWS::EC2::Subnet'
    Properties:
      CidrBlock: 10.0.96.0/19
      AvailabilityZone: !Select
        - '0'
        - !GetAZs
          Ref: 'AWS::Region'
      VpcId: !Ref VPC
  Subnet02:
    Type: 'AWS::EC2::Subnet'
    Properties:
      CidrBlock: 10.0.128.0/19
      AvailabilityZone: !Select
        - '1'
        - !GetAZs
          Ref: 'AWS::Region'
      VpcId: !Ref VPC


#####################################
#               API                 #
#####################################
  RestApi:
    Type: 'AWS::ApiGateway::RestApi'
    Properties:
      EndpointConfiguration:
        Types:
          - EDGE
      Name: !Sub ${Env}-api

#  RestApiDeployment:
#    Type: AWS::ApiGateway::Deployment
#    DependsOn:
#      - PostBotMethod
#    Properties:
#      RestApiId: !Ref RestApi

#  RestApiStage:
#    Type: AWS::ApiGateway::Stage
#    Properties:
#      StageName: !Sub ${Env}
#      Description: !Sub ${Env} Stage
#      RestApiId: !Ref RestApi
#      DeploymentId: !Ref RestApiDeployment

  RestApiRootResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt RestApi.RootResourceId
      PathPart: api
      RestApiId: !Ref RestApi

# Api Methods Level 1
  PostBotMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      HttpMethod: POST
#      Integration:
#        ConnectionType: INTERNET
#        IntegrationHttpMethod: POST
#        Type: AWS_PROXY
      ResourceId: !Ref RestApiRootResource
      RestApiId: !Ref RestApi


#####################################
#             CLUSTER               #
#####################################
  ECSTaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ecs-tasks.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Description: Role to execute ACS Task

  ECSCluster:
    Type: 'AWS::ECS::Cluster'
    Properties:
      ClusterName: !Sub ${Env}

  AppLoadBalancer:
    Type: 'AWS::ElasticLoadBalancingV2::LoadBalancer'
    Properties:
      Name: !Sub ${Env}-ApplicationLoadBalancer
      Subnets:
        - !Ref Subnet01
        - !Ref Subnet02
      SecurityGroups:
        - !GetAtt FargateALBSG.GroupId
      Type: application

  FargateTargetGroup:
    Type: 'AWS::ElasticLoadBalancingV2::TargetGroup'
    Properties:
      Name: !Sub ${Env}-ClusterTargetGroup
      VpcId: !Ref VPC
      Protocol: HTTP
      Port: 8080
      HealthCheckPath: /actuator/
      TargetType: ip

  FargateListener:
    Type: 'AWS::ElasticLoadBalancingV2::Listener'
    Properties:
      DefaultActions:
        - TargetGroupArn: !Ref FargateTargetGroup
          Type: forward
      LoadBalancerArn: !Ref AppLoadBalancer
      Port: 80
      Protocol: HTTP

  FargateALBSG:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: SG for the Fargate ALB
      GroupName: !Sub ${Env}-FargateALB_SG
      SecurityGroupIngress:
        - CidrIpv6: ::/0
          FromPort: 80
          ToPort: 80
          IpProtocol: TCP
          Description: 'Inbound rule for IPv6 traffic'
        - CidrIp: 0.0.0.0/0
          FromPort: 80
          ToPort: 80
          IpProtocol: TCP
          Description: 'Inbound rule for IPv4 traffic'

  ALB2FargateContainersSG:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: SG for traffic between ALB and containers
      GroupName: !Sub ${Env}-ALB2FargateContainers_SG
      SecurityGroupIngress:
        - IpProtocol: -1
          SourceSecurityGroupId: !GetAtt FargateALBSG.GroupId
          Description: 'Inbound rule for all traffic'

#####################################
#            SERVICES               #
#####################################

# prophase-bot service
  BotServiceRepository:
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: !Sub ${BotServiceName}-service
      RepositoryPolicyText:
        Version: "2012-10-17"
        Statement:
          - Sid: AllowPushPull
            Effect: Allow
            Principal:
              AWS:
                - "arn:aws:iam::149284612295:user/GitHub_Actions"
            Action:
              - "ecr:*"

  BotServiceDBSecret:
    Type: 'AWS::SecretsManager::Secret'
    Properties:
      Name: !Sub ${Env}-${BotServiceName}-db
      Description: !Sub AWS RDS admin credentials for ${BotServiceName} DB
      GenerateSecretString:
        SecretStringTemplate: '{"username": "postgres", "port": "5432"}'
        GenerateStringKey: password
        PasswordLength: 16
        ExcludeCharacters: '"@/\#$^*()-+='
  BotServiceDBInstance:
    Type: 'AWS::RDS::DBInstance'
    Properties:
      AllocatedStorage: 20
      DBInstanceClass: db.t2.micro
      DBInstanceIdentifier: !Sub ${Env}-${BotServiceName}
      Engine: postgres
      DBSubnetGroupName: !Ref BotServiceDBSubnetGroup
      MasterUsername: !Sub '{{resolve:secretsmanager:${BotServiceDBSecret}::username}}'
      MasterUserPassword: !Sub '{{resolve:secretsmanager:${BotServiceDBSecret}::password}}'
      BackupRetentionPeriod: 0
      VPCSecurityGroups:
        - !GetAtt
          - VPC
          - DefaultSecurityGroup
  BotServiceDBSubnetGroup:
    Type: 'AWS::RDS::DBSubnetGroup'
    Properties:
      DBSubnetGroupDescription: !Sub Group for ${BotServiceName} DB
      SubnetIds:
        - !Ref Subnet01
        - !Ref Subnet02
  BotServiceDBSecretInstanceAttachment:
    Type: 'AWS::SecretsManager::SecretTargetAttachment'
    Properties:
      SecretId: !Ref BotServiceDBSecret
      TargetId: !Ref BotServiceDBInstance
      TargetType: 'AWS::RDS::DBInstance'

  BotServiceDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      RequiresCompatibilities:
        - "FARGATE"
      ExecutionRoleArn: !GetAtt ECSTaskExecutionRole.Arn
      Cpu: 256
      Memory: 512
      NetworkMode: "awsvpc"
      ContainerDefinitions:
        - Name: !Sub ${BotServiceName}-task
          Image: !Sub ${BotServiceRepository.RepositoryUri}:latest
          MemoryReservation: 256
          Memory: 512
          PortMappings:
            - ContainerPort: 8081
              Protocol: tcp
      Family: !Sub ${BotServiceName}-service-task

Outputs: {}